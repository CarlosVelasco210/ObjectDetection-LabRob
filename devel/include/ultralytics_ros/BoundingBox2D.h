// Generated by gencpp from file ultralytics_ros/BoundingBox2D.msg
// DO NOT EDIT!


#ifndef ULTRALYTICS_ROS_MESSAGE_BOUNDINGBOX2D_H
#define ULTRALYTICS_ROS_MESSAGE_BOUNDINGBOX2D_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ultralytics_ros/Pose2D.h>
#include <ultralytics_ros/Vector2.h>

namespace ultralytics_ros
{
template <class ContainerAllocator>
struct BoundingBox2D_
{
  typedef BoundingBox2D_<ContainerAllocator> Type;

  BoundingBox2D_()
    : center()
    , size()  {
    }
  BoundingBox2D_(const ContainerAllocator& _alloc)
    : center(_alloc)
    , size(_alloc)  {
  (void)_alloc;
    }



   typedef  ::ultralytics_ros::Pose2D_<ContainerAllocator>  _center_type;
  _center_type center;

   typedef  ::ultralytics_ros::Vector2_<ContainerAllocator>  _size_type;
  _size_type size;





  typedef boost::shared_ptr< ::ultralytics_ros::BoundingBox2D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ultralytics_ros::BoundingBox2D_<ContainerAllocator> const> ConstPtr;

}; // struct BoundingBox2D_

typedef ::ultralytics_ros::BoundingBox2D_<std::allocator<void> > BoundingBox2D;

typedef boost::shared_ptr< ::ultralytics_ros::BoundingBox2D > BoundingBox2DPtr;
typedef boost::shared_ptr< ::ultralytics_ros::BoundingBox2D const> BoundingBox2DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ultralytics_ros::BoundingBox2D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ultralytics_ros::BoundingBox2D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ultralytics_ros::BoundingBox2D_<ContainerAllocator1> & lhs, const ::ultralytics_ros::BoundingBox2D_<ContainerAllocator2> & rhs)
{
  return lhs.center == rhs.center &&
    lhs.size == rhs.size;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ultralytics_ros::BoundingBox2D_<ContainerAllocator1> & lhs, const ::ultralytics_ros::BoundingBox2D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ultralytics_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ultralytics_ros::BoundingBox2D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ultralytics_ros::BoundingBox2D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ultralytics_ros::BoundingBox2D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ultralytics_ros::BoundingBox2D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ultralytics_ros::BoundingBox2D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ultralytics_ros::BoundingBox2D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ultralytics_ros::BoundingBox2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3bfd37eba13978a14efaa97812c78fda";
  }

  static const char* value(const ::ultralytics_ros::BoundingBox2D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3bfd37eba13978a1ULL;
  static const uint64_t static_value2 = 0x4efaa97812c78fdaULL;
};

template<class ContainerAllocator>
struct DataType< ::ultralytics_ros::BoundingBox2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ultralytics_ros/BoundingBox2D";
  }

  static const char* value(const ::ultralytics_ros::BoundingBox2D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ultralytics_ros::BoundingBox2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 2D position and orientation of the bounding box center\n"
"ultralytics_ros/Pose2D center\n"
"\n"
"# total size of the bounding box, in pixels, surrounding the object's center\n"
"ultralytics_ros/Vector2 size\n"
"================================================================================\n"
"MSG: ultralytics_ros/Pose2D\n"
"# 2D position in pixel coordinates\n"
"\n"
"ultralytics_ros/Point2D position\n"
"float64 theta\n"
"================================================================================\n"
"MSG: ultralytics_ros/Point2D\n"
"# 2D point in pixel coordinates\n"
"\n"
"float64 x\n"
"float64 y\n"
"================================================================================\n"
"MSG: ultralytics_ros/Vector2\n"
"# 2D size in pixel\n"
"\n"
"float64 x\n"
"float64 y\n"
;
  }

  static const char* value(const ::ultralytics_ros::BoundingBox2D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ultralytics_ros::BoundingBox2D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.center);
      stream.next(m.size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BoundingBox2D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ultralytics_ros::BoundingBox2D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ultralytics_ros::BoundingBox2D_<ContainerAllocator>& v)
  {
    s << indent << "center: ";
    s << std::endl;
    Printer< ::ultralytics_ros::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.center);
    s << indent << "size: ";
    s << std::endl;
    Printer< ::ultralytics_ros::Vector2_<ContainerAllocator> >::stream(s, indent + "  ", v.size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ULTRALYTICS_ROS_MESSAGE_BOUNDINGBOX2D_H
