// Generated by gencpp from file ultralytics_ros/KeyPoint3D.msg
// DO NOT EDIT!


#ifndef ULTRALYTICS_ROS_MESSAGE_KEYPOINT3D_H
#define ULTRALYTICS_ROS_MESSAGE_KEYPOINT3D_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace ultralytics_ros
{
template <class ContainerAllocator>
struct KeyPoint3D_
{
  typedef KeyPoint3D_<ContainerAllocator> Type;

  KeyPoint3D_()
    : id(0)
    , point()
    , score(0.0)  {
    }
  KeyPoint3D_(const ContainerAllocator& _alloc)
    : id(0)
    , point(_alloc)
    , score(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _point_type;
  _point_type point;

   typedef double _score_type;
  _score_type score;





  typedef boost::shared_ptr< ::ultralytics_ros::KeyPoint3D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ultralytics_ros::KeyPoint3D_<ContainerAllocator> const> ConstPtr;

}; // struct KeyPoint3D_

typedef ::ultralytics_ros::KeyPoint3D_<std::allocator<void> > KeyPoint3D;

typedef boost::shared_ptr< ::ultralytics_ros::KeyPoint3D > KeyPoint3DPtr;
typedef boost::shared_ptr< ::ultralytics_ros::KeyPoint3D const> KeyPoint3DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ultralytics_ros::KeyPoint3D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ultralytics_ros::KeyPoint3D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ultralytics_ros::KeyPoint3D_<ContainerAllocator1> & lhs, const ::ultralytics_ros::KeyPoint3D_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.point == rhs.point &&
    lhs.score == rhs.score;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ultralytics_ros::KeyPoint3D_<ContainerAllocator1> & lhs, const ::ultralytics_ros::KeyPoint3D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ultralytics_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ultralytics_ros::KeyPoint3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ultralytics_ros::KeyPoint3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ultralytics_ros::KeyPoint3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ultralytics_ros::KeyPoint3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ultralytics_ros::KeyPoint3D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ultralytics_ros::KeyPoint3D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ultralytics_ros::KeyPoint3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "41e09e06b21b15ee731700b10966b3dc";
  }

  static const char* value(const ::ultralytics_ros::KeyPoint3D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x41e09e06b21b15eeULL;
  static const uint64_t static_value2 = 0x731700b10966b3dcULL;
};

template<class ContainerAllocator>
struct DataType< ::ultralytics_ros::KeyPoint3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ultralytics_ros/KeyPoint3D";
  }

  static const char* value(const ::ultralytics_ros::KeyPoint3D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ultralytics_ros::KeyPoint3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# one keypoint for human pose estimation\n"
"\n"
"# id of the keypoint\n"
"int32 id\n"
"\n"
"# 3D point in meters\n"
"geometry_msgs/Point point\n"
"\n"
"# conf of the keypoint\n"
"float64 score\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::ultralytics_ros::KeyPoint3D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ultralytics_ros::KeyPoint3D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.point);
      stream.next(m.score);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct KeyPoint3D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ultralytics_ros::KeyPoint3D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ultralytics_ros::KeyPoint3D_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
    s << indent << "score: ";
    Printer<double>::stream(s, indent + "  ", v.score);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ULTRALYTICS_ROS_MESSAGE_KEYPOINT3D_H
